name: "Test"

on:
  workflow_call:
    # No inputs needed at this time
  
env:
  # https://gist.github.com/NodeJSmith/e7e37f2d3f162456869f015f842bcf15
  PYTHONIOENCODING: "utf8"

jobs:

  test:
    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest]
        experimental: [false]
        include:
          - runner: ubuntu-24.04-arm
            experimental: true
          - runner: macos-latest
            experimental: true
          - runner: macos-13
            experimental: true
          - runner: windows-latest
            experimental: true
          - runner: windows-11-arm
            experimental: true
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v6.3.0
        with:
          version: "0.6.3"
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Install dev tools
        if: ${{ matrix.runner == 'ubuntu-latest' || matrix.runner == 'ubuntu-24.04-arm' }}
        shell: bash
        run: .github/workflows/_install_dev_tools.bash

      - name: Install Python, venv and dependencies
        shell: bash
        run: uv sync --all-extras --frozen --link-mode=copy

      # Need xdisplay for testing QuPath app integration
      - name: Setup display
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2
  
      - name: Release version check
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          TOML_VERSION=$(uv run python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
            echo "Release version mismatch: Tag $TAG_VERSION != pyproject.toml $TOML_VERSION"
            exit 1
          fi

      - name: Print development version info
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          TOML_VERSION=$(uv run python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Development build - Current version in pyproject.toml: $TOML_VERSION"

      - name: Create .env file
        uses: SpicyPizza/create-envfile@ace6d4f5d7802b600276c23ca417e669f1a06f6f # v2.0.3
        with:
          envkey_AIGNOSTICS_LOGFIRE_TOKEN: "${{ secrets.AIGNOSTICS_LOGFIRE_TOKEN }}"
          envkey_AIGNOSTICS_SENTRY_DSN: "${{ secrets.AIGNOSTICS_SENTRY_DSN }}"
          envkey_AIGNOSTICS_API_ROOT: https://platform.aignostics.com
          envkey_AIGNOSTICS_CLIENT_ID_DEVICE: ${{ secrets.AIGNOSTICS_CLIENT_ID_DEVICE }}
          envkey_AIGNOSTICS_CLIENT_ID_INTERACTIVE: ${{ secrets.AIGNOSTICS_CLIENT_ID_INTERACTIVE }}
          envkey_AIGNOSTICS_REFRESH_TOKEN: ${{ secrets.AIGNOSTICS_REFRESH_TOKEN }}
          envkey_AIGNOSTICS_BUCKET_NAME: ${{ secrets.AIGNOSTICS_BUCKET_NAME }}
          envkey_AIGNOSTICS_BUCKET_HMAC_ACCESS_KEY_ID: ${{ secrets.AIGNOSTICS_BUCKET_HMAC_ACCESS_KEY_ID }}
          envkey_AIGNOSTICS_BUCKET_HMAC_SECRET_ACCESS_KEY: ${{ secrets.AIGNOSTICS_BUCKET_HMAC_SECRET_ACCESS_KEY }}
          fail_on_empty: false

      - name: Set up GCP credentials for bucket access
        shell: bash
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/credentials.json" >> $GITHUB_ENV

      - name: Validate installation
        shell: bash
        run: |
            OUTPUT=$(uv run --no-dev aignostics --help)
            if [[ "$OUTPUT" != *"built with love in Berlin"* ]]; then
            echo "Output does not contain 'built with love in Berlin'"
            exit 1
            fi

      - name: Smoke tests
        shell: bash
        run: |
          uv run --no-dev aignostics --help
          uv run --all-extras aignostics system info
          uv run --all-extras aignostics system health
          uv run --all-extras aignostics application list
          uv run --all-extras aignostics application run list --verbose --limit 1

      - name: Test / regular
        shell: bash
        run: |
          set +e
          make test
          EXIT_CODE=$?
          # Show test execution in GitHub Job summary
          found_files=0
          for file in reports/pytest_*.md; do
          if [ -f "$file" ]; then
            cat "$file" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            found_files=1
          fi
          done
          if [ $found_files -eq 0 ]; then
            echo "# All regular tests passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          # Show test coverage in GitHub Job summary
          if [ -f "reports/coverage.md" ]; then
            cat "reports/coverage.md" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "# No test coverage computed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          exit $EXIT_CODE

      - name: Test / long running
        shell: bash
        run: |
          set +e
          make test_long_running
          EXIT_CODE=$?
          # Show test execution in GitHub Job summary
          found_files=0
          for file in reports/pytest_*.md; do
          if [ -f "$file" ]; then
            cat "$file" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            found_files=1
          fi
          done
          if [ $found_files -eq 0 ]; then
            echo "# All long running tests passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          # Show test coverage in GitHub Job summary
          if [ -f "reports/coverage.md" ]; then
            cat "reports/coverage.md" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "# No test coverage computed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          exit $EXIT_CODE

      - name: Upload test results
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: ${{ always() && (env.GITHUB_WORKFLOW_RUNTIME != 'ACT') }}
        with:
          name: test-results-${{ matrix.runner }}
          path: |
            reports/mypy_junit.xml
            reports/junit.xml
            reports/coverage.xml
            reports/coverage.md
            reports/coverage_html
            aignostics.log
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        if: ${{ !cancelled() && (env.GITHUB_WORKFLOW_RUNTIME != 'ACT') && matrix.runner == 'ubuntu-latest' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: aignostics/python-sdk

      - name: Upload test results to Codecov
        if: ${{ !cancelled() && (env.GITHUB_WORKFLOW_RUNTIME != 'ACT') && matrix.runner == 'ubuntu-latest' }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: SonarQube Scan
        if: ${{ !cancelled() && (env.GITHUB_WORKFLOW_RUNTIME != 'ACT') && matrix.runner == 'ubuntu-latest' }}
        uses: SonarSource/sonarqube-scan-action@0303d6b62e310685c0e34d0b9cde218036885c4d # v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
