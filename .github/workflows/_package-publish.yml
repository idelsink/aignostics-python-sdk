name: "Publish Package"

on:
  workflow_call:
    # No inputs needed at this time

env:
  # https://gist.github.com/NodeJSmith/e7e37f2d3f162456869f015f842bcf15
  PYTHONIOENCODING: "utf8"

jobs:

  build_native:

    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest]
        experimental: [false]
        include:
          - runner: ubuntu-24.04-arm
            experimental: true
          - runner: macos-latest
            experimental: true
          - runner: macos-13
            experimental: true
          - runner: windows-latest
            experimental: true
          - runner: windows-11-arm
            experimental: true

    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          version: "0.6.3"
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Install Python, venv and dependencies
        shell: bash
        run: uv sync --all-extras --frozen --link-mode=copy

      - name: Validate installation
        shell: bash
        run: |
            OUTPUT=$(uv run --all-extras --no-dev aignostics --help)
            if [[ "$OUTPUT" != *"built with love in Berlin"* ]]; then
            echo "Output does not contain 'built with love in Berlin'"
            exit 1
            fi

      - name: Build native distribution into dist_native/
        shell: bash
        run: make dist_native

      - name: Upload dist_native artifacts
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: ${{ always() && (env.GITHUB_WORKFLOW_RUNTIME != 'ACT') }}
        with:
          name: dist_native-${{ matrix.runner }}
          path: dist_native/
          retention-days: 1

  package_publish:
    runs-on: ubuntu-latest
    needs: build_native
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          version: "0.6.3"
          cache-dependency-glob: uv.lock
          enable-cache: true

      - name: Install dev tools
        shell: bash
        run: .github/workflows/_install_dev_tools.bash

      - name: Download native distribution artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: dist_native-*
          path: dist_native_all/
          merge-multiple: false

      - name: Create zip archives for native executables
        shell: bash
        run: |
          mkdir -p dist_native_zipped/
          cd dist_native_all/
          for dir in */; do
            if [ -d "$dir" ]; then
              platform_name=${dir%/}
              echo "Creating zip for platform: $platform_name"
              cd "$dir"
              zip -r "../../dist_native_zipped/$platform_name.zip" .
              cd ..
            fi
          done
          cd ..
          ls -la dist_native_zipped/

      - name: Docs
        shell: bash
        run: make docs

      - name: Generate release notes
        uses: orhun/git-cliff-action@4a4a951bc43fafe41cd2348d181853f52356bee7 # v4.4.2
        id: git-cliff
        with:
          config: pyproject.toml
          args: --verbose --latest --strip header
        env:
          OUTPUT: RELEASE_NOTES.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Print the release notes
        shell: bash
        run: cat "${{ steps.git-cliff.outputs.changelog }}"

      - name: Build distribution into dist/
        shell: bash
        run: make dist


      - name: Publish distribution to Python Package Index at pypi.org
        shell: bash
        run: uv publish -t ${{ secrets.UV_PUBLISH_TOKEN }}


      - name: Have audit checks publish to reports/ for auditing
        shell: bash
        run: make audit

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release create ${{ github.ref_name }} ./dist/* ./reports/* ./dist_native_zipped/* \
            --notes-file ${{ steps.git-cliff.outputs.changelog }}
            
      - name: Allow other workflows to trigger on release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh api repos/aignostics/python-sdk/dispatches \
            -f event_type=release_created_programatically
